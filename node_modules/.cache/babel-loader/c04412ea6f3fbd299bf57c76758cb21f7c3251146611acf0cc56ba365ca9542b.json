{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KIIT0001\\\\Desktop\\\\React Weather App\\\\src\\\\context\\\\weather.context.js\",\n  _s = $RefreshSig$();\nimport { createContext, useEffect, useState } from \"react\";\nimport { DEFAULT_PLACE, MEASUREMENT_SYSTEMS } from \"../constants\";\nimport { getWeatherData } from \"../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherContext = /*#__PURE__*/createContext();\nfunction WeatherProvider({\n  children\n}) {\n  _s();\n  const [place, setPlace] = useState(DEFAULT_PLACE);\n  const [loading, setLoading] = useState(true);\n  const [currentWeather, setCurrentWeather] = useState({});\n  const [hourlyForecast, setHourlyForecast] = useState([]);\n  const [dailyForecast, setDailyForecast] = useState([]);\n  const [measurementSystems, setMeasurementSystem] = useState(MEASUREMENT_SYSTEMS.AUTO);\n  useEffect(() => {\n    async function _getWeatherData() {\n      setLoading(true);\n      const cw = await getWeatherData('current', place.place_id, 'auto');\n      setCurrentWeather(cw.current);\n      const hf = await getWeatherData('hourly', place.place_id, 'auto');\n      setHourlyForecast(hf.hourly.data);\n      const df = await getWeatherData('daily', place.place_id, 'auto');\n      setDailyForecast(df.daily.data);\n      setLoading(false);\n    }\n    _getWeatherData();\n  }, [place]);\n  return /*#__PURE__*/_jsxDEV(WeatherContext.Provider, {\n    value: {\n      place,\n      loading,\n      currentWeather,\n      hourlyForecast,\n      dailyForecast,\n      measurementSystems,\n      setMeasurementSystem\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 3\n  }, this);\n}\n_s(WeatherProvider, \"VpLJC+YcpX+16UDMvT3RetSsEtM=\");\n_c = WeatherProvider;\nexport { WeatherProvider };\nexport default WeatherContext;\nvar _c;\n$RefreshReg$(_c, \"WeatherProvider\");","map":{"version":3,"names":["createContext","useEffect","useState","DEFAULT_PLACE","MEASUREMENT_SYSTEMS","getWeatherData","jsxDEV","_jsxDEV","WeatherContext","WeatherProvider","children","_s","place","setPlace","loading","setLoading","currentWeather","setCurrentWeather","hourlyForecast","setHourlyForecast","dailyForecast","setDailyForecast","measurementSystems","setMeasurementSystem","AUTO","_getWeatherData","cw","place_id","current","hf","hourly","data","df","daily","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/KIIT0001/Desktop/React Weather App/src/context/weather.context.js"],"sourcesContent":["import { createContext, useEffect, useState } from \"react\";\r\nimport {DEFAULT_PLACE, MEASUREMENT_SYSTEMS} from \"../constants\"\r\nimport { getWeatherData } from \"../api\";\r\n\r\nconst WeatherContext = createContext();\r\n\r\nfunction WeatherProvider({ children }) {\r\n    const [place,setPlace] = useState(DEFAULT_PLACE);\r\n    const [loading,setLoading] = useState(true);\r\n    const [currentWeather,setCurrentWeather] = useState({});\r\n    const [hourlyForecast,setHourlyForecast] = useState([]);\r\n    const [dailyForecast,setDailyForecast] = useState([]);\r\n    const [measurementSystems,setMeasurementSystem] = useState(\r\n        MEASUREMENT_SYSTEMS.AUTO\r\n    );\r\n\r\n    useEffect(() => {\r\n        async function _getWeatherData() {\r\n            setLoading(true);\r\n\r\n            const cw = await getWeatherData(\r\n                'current',\r\n                place.place_id,\r\n                'auto'\r\n            );\r\n            setCurrentWeather(cw.current);\r\n\r\n            const hf = await getWeatherData(\r\n                'hourly',\r\n                place.place_id,\r\n                'auto'\r\n            );\r\n            setHourlyForecast(hf.hourly.data)\r\n            \r\n            const df = await getWeatherData(\r\n                'daily',\r\n                place.place_id,\r\n                'auto'\r\n            );\r\n            setDailyForecast(df.daily.data)\r\n\r\n            setLoading(false);\r\n        }\r\n        _getWeatherData();\r\n    },[place])\r\n  \r\n    return (\r\n  <WeatherContext.Provider value={{\r\n    place,\r\n    loading,\r\n    currentWeather,\r\n    hourlyForecast,\r\n    dailyForecast,\r\n    measurementSystems,\r\n    setMeasurementSystem,\r\n    }}\r\n    >\r\n  {children}\r\n  </WeatherContext.Provider>\r\n  );\r\n}\r\n\r\nexport{WeatherProvider}\r\nexport default  WeatherContext; "],"mappings":";;AAAA,SAASA,aAAa,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAAQC,aAAa,EAAEC,mBAAmB,QAAO,cAAc;AAC/D,SAASC,cAAc,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,cAAc,gBAAGR,aAAa,CAAC,CAAC;AAEtC,SAASS,eAAeA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACnC,MAAM,CAACC,KAAK,EAACC,QAAQ,CAAC,GAAGX,QAAQ,CAACC,aAAa,CAAC;EAChD,MAAM,CAACW,OAAO,EAACC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC3C,MAAM,CAACc,cAAc,EAACC,iBAAiB,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC,CAAC;EACvD,MAAM,CAACgB,cAAc,EAACC,iBAAiB,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACvD,MAAM,CAACkB,aAAa,EAACC,gBAAgB,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACrD,MAAM,CAACoB,kBAAkB,EAACC,oBAAoB,CAAC,GAAGrB,QAAQ,CACtDE,mBAAmB,CAACoB,IACxB,CAAC;EAEDvB,SAAS,CAAC,MAAM;IACZ,eAAewB,eAAeA,CAAA,EAAG;MAC7BV,UAAU,CAAC,IAAI,CAAC;MAEhB,MAAMW,EAAE,GAAG,MAAMrB,cAAc,CAC3B,SAAS,EACTO,KAAK,CAACe,QAAQ,EACd,MACJ,CAAC;MACDV,iBAAiB,CAACS,EAAE,CAACE,OAAO,CAAC;MAE7B,MAAMC,EAAE,GAAG,MAAMxB,cAAc,CAC3B,QAAQ,EACRO,KAAK,CAACe,QAAQ,EACd,MACJ,CAAC;MACDR,iBAAiB,CAACU,EAAE,CAACC,MAAM,CAACC,IAAI,CAAC;MAEjC,MAAMC,EAAE,GAAG,MAAM3B,cAAc,CAC3B,OAAO,EACPO,KAAK,CAACe,QAAQ,EACd,MACJ,CAAC;MACDN,gBAAgB,CAACW,EAAE,CAACC,KAAK,CAACF,IAAI,CAAC;MAE/BhB,UAAU,CAAC,KAAK,CAAC;IACrB;IACAU,eAAe,CAAC,CAAC;EACrB,CAAC,EAAC,CAACb,KAAK,CAAC,CAAC;EAEV,oBACFL,OAAA,CAACC,cAAc,CAAC0B,QAAQ;IAACC,KAAK,EAAE;MAC9BvB,KAAK;MACLE,OAAO;MACPE,cAAc;MACdE,cAAc;MACdE,aAAa;MACbE,kBAAkB;MAClBC;IACA,CAAE;IAAAb,QAAA,EAEHA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAE5B;AAAC5B,EAAA,CAtDQF,eAAe;AAAA+B,EAAA,GAAf/B,eAAe;AAwDxB,SAAOA,eAAe;AACtB,eAAgBD,cAAc;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}